{$CLEO .csa}


/*
 *  Open Source Code: 
 *  
 *  Credits: 
 *  base script config: muhammad zauqie firdaus 
 *  cleo contribution: 	- xavion
 *						- bisma candra
 *                     	- rizky aldiansyah  
 *  
 *  SannyBuilder for Compile This Script:
 *  https://drive.google.com/file/d/1bKLTS89fk1ijOwZbr79bFNR_WRtgBoiE/view?usp=drivesdk
 *  
 *  if you use this script for your project, please put this credits
 *	please dont delete this comment
 *  respect author :)
 */


Script.Name("LoadConfig Source");
jump @StartScript
const
    ReturnValue = 11@
    ReloadValue = 12@
    DATATYPE = 13@
    integer = 2
    float = 4
end

:ShowTextBox
03E5: show_text_box 5@s

:MainLoop
wait 0

/*
    you can put here features that require loops
    
    exam.
    GUI.DrawBox(positionX, positionY, sizeX, sizeY, R, G, B, A);
*/

if Widget.IsPress(ReloadValue); //reload config 
jf @MainLoop
wait 1000
jump @StartScript
return

:StartScript
Script.Name("load");

:main
Script.Name("main");
if OpenConfigFile() //return as: $stream 
then
	DATATYPE = integer
	GetValueFromConfig() //return as "ReturnValue"
	0085: 10@ = ReturnValue // (int)
	
	DATATYPE = integer
	GetValueFromConfig() //ButtonReloadID 
	0085: ReloadValue = ReturnValue // (int)
	if 10@ <> true
	then
		05AA: 5@s = "ERR1"
		ShowTextBox() //need 5@s as parameter 
	end
	DATATYPE = integer
	GetValueFromConfig() //EnableHud 
	EnaSet.Hud(ReturnValue);
	DATATYPE = integer
	GetValueFromConfig() //EnableRadar
	EnaSet.Radar(ReturnValue);
	
	CloseConfig()
else
	wait 5000
	05AA: 5@s = "ERR0"
	ShowTextBox() //need 5@s as parameter 
end
jump @MainLoop

:OpenConfigFile
Script.Name("open file");
1@ = Hook.Label(%p, @path);
2@ = Hook.Label(%p, @mode);
0@ = Hook.Label(%p, @_ZN8CFileMgr8OpenFileEPKcS1_);
0@ = Hook.ConvertFunc(0@);
Hook.SetReg(R0, 1@); //path 
Hook.SetReg(R1, 2@); //mode 
Hook.CallFunc(0@);
$stream = Hook.GetReg(R0);
if $stream <> false // if file open 
return

:GetValueFromConfig
Script.Name("get value");
ReadLineConfig()
if DATATYPE == integer
then
    DATATYPE = Hook.Label(%p, @int);
end
if DATATYPE == float
then
    DATATYPE = Hook.Label(%p, @float);
end
ReturnValue = Hook.Label(%p, @value);
1@ = Hook.Label(%p, @string);
2@ = Hook.Label(%p, @string_buff);
3@ = Hook.Label(%p, @equal);
0@ = 0x18D7B8 //v1.08 = 0x179670
1@ = Sys.ImageBase();
005A: 0@ += 1@ //memory + lib
Hook.SetReg(R0, $buffer);
Hook.SetReg(R1, 1@);
Hook.SetReg(R2, 2@);
Hook.SetReg(R3, 3@);
Hook.CallFunc(0@); //sscanf 
Hook.SetReg(R0, $buffer);
Hook.SetReg(R1, DATATYPE);
Hook.SetReg(R2, ReturnValue);
Hook.CallFunc(0@); //sscanf 
DATATYPE = 0
ReturnValue = Memory.Read(ReturnValue, 4, false);
return

:ReadLineConfig
Script.Name("read line");
$buffer = Hook.Label(%p, @buffer);
0@ = Hook.Label(%p, @_ZN8CFileMgr8ReadLineEjPci);
0@ = Hook.ConvertFunc(0@);
Hook.SetReg(R0, $stream);
Hook.SetReg(R1, $buffer);
Hook.SetReg(R2, 512);
Hook.CallFunc(0@);
0@ = Memory.Read($buffer, 1, false);
if and
0@ <> 0x0A // Line Feed 
0@ <> 0x5B // [ 
jf @ReadLineConfig
return

:CloseConfig
Script.Name("close file");
0@ = Hook.Label(%p, @_ZN8CFileMgr9CloseFileEj);
0@ = Hook.ConvertFunc(0@);
Hook.SetReg(R0 , $stream);
Hook.CallFunc(0@);
return

:_ZN8CFileMgr8OpenFileEPKcS1_
hex
	"_ZN8CFileMgr8OpenFileEPKcS1_" 00 //"fopen" 00
end

:path //your config path
hex
	"configs/myconfig.ini" 00
end

:mode
hex
	"rt" 00 //read text 
end

:_ZN8CFileMgr8ReadLineEiPci //V1.08
hex
    "_ZN8CFileMgr8ReadLineEiPci" 00
end

:_ZN8CFileMgr8ReadLineEjPci //V2.00
hex
    "_ZN8CFileMgr8ReadLineEjPci" 00
end

:string
hex
	"%s%s" 00
end

:int
hex
	"%*s%*s%d" 00
end

:float
hex
	"%*s%*s%f" 00 
end

:_ZN8CFileMgr9CloseFileEi //V1.08
hex
    "_ZN8CFileMgr9CloseFileEi" 00
end

:_ZN8CFileMgr9CloseFileEj //V2.00
hex
    "_ZN8CFileMgr9CloseFileEj" 00
end

:equal
hex
    00 //for scan "=" 
end

:value
hex
    00000000
end

:buffer //512 byte 
hex
	00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
end

:string_buff
hex
	00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
	00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
end
